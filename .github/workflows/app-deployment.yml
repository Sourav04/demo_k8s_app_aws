name: Application Deployment

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'app/**'
      - 'helm/**'
      - 'argocd/**'
      - '.github/workflows/app-deployment.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'app/**'
      - 'helm/**'
      - 'argocd/**'

env:
  REGISTRY: docker.io
  IMAGE_NAME: souravdixit04/demo_k8s_app_aws
  APP_VERSION: v1.0.0

permissions:
  contents: read
  security-events: write

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r app/requirements.txt
        pip install pytest pytest-cov flake8
        
    - name: Run linting
      run: |
        flake8 app/src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 app/src/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Run unit tests
      run: |
        cd app
        python -m pytest tests/ -v --cov=src --cov-report=xml
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./app/coverage.xml
        flags: unittests
        name: codecov-umbrella

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    - name: Generate version tag
      id: version
      run: |
        # Generate version based on date and commit
        VERSION="${{ env.APP_VERSION }}-$(date +'%Y%m%d-%H%M%S')-${GITHUB_SHA::8}"
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Generated version: $VERSION"
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha
          type=raw,value=${{ steps.version.outputs.version }}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: Dockerfile
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          APP_VERSION=${{ steps.version.outputs.version }}
          BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          VCS_REF=${{ github.sha }}

  deploy-application:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Generate version tag
      id: version
      run: |
        # Generate version based on date and commit
        VERSION="${{ env.APP_VERSION }}-$(date +'%Y%m%d-%H%M%S')-${GITHUB_SHA::8}"
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Generated version: $VERSION"
        
    - name: Setup kubectl
      run: |
        # Install kubectl
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2
        
    - name: Get kubeconfig from infrastructure
      run: |
        # Download cluster info from infrastructure workflow
        # This assumes the infrastructure workflow has already run and uploaded cluster info
        echo "Getting cluster information..."
        
        # For now, we'll use a simplified approach
        # In a real scenario, you might want to store kubeconfig in a secure location
        # or use a service account with cluster access
        
        # Get cluster info from Terraform state (if available)
        if [ -f "terraform/cluster-info.json" ]; then
          echo "Using existing cluster info"
        else
          echo "Cluster info not found. Please ensure infrastructure is deployed first."
          exit 1
        fi
        
    - name: Deploy ArgoCD Application
      run: |
        echo "Deploying ArgoCD Application with version: ${{ steps.version.outputs.version }}"
        
        # Update the ArgoCD application with new image tag
        # This will trigger ArgoCD to sync the new version
        echo "Application will be deployed via ArgoCD with version: ${{ steps.version.outputs.version }}"
        
        # You can also directly apply the ArgoCD application here if needed
        # kubectl apply -f argocd/application.yaml
        
    - name: Update Helm values with new version
      run: |
        echo "Updating Helm values with version: ${{ steps.version.outputs.version }}"
        
        # Update the Helm values file with the new image tag
        # This ensures ArgoCD will use the new version
        sed -i "s|imageTag:.*|imageTag: ${{ steps.version.outputs.version }}|g" helm/python-app/values.yaml
        
        # Commit and push the changes to trigger ArgoCD sync
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add helm/python-app/values.yaml
        git commit -m "Update app version to ${{ steps.version.outputs.version }}" || echo "No changes to commit"
        git push origin main || echo "Push failed or no changes"
        
    - name: Verify deployment
      run: |
        echo "Verifying deployment..."
        echo "Application version ${{ steps.version.outputs.version }} has been deployed"
        echo "ArgoCD will automatically sync the new version"

  notify:
    name: Notify Application Deployment
    runs-on: ubuntu-latest
    needs: [deploy-application]
    if: always()
    
    steps:
    - name: Generate version tag
      id: version
      run: |
        # Generate version based on date and commit
        VERSION="${{ env.APP_VERSION }}-$(date +'%Y%m%d-%H%M%S')-${GITHUB_SHA::8}"
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
    - name: Slack Notification
      uses: 8398a7/action-slack@v3
      with:
        status: success
        channel: '#deployments'
        author_name: Application Pipeline
        github_token: ${{ secrets.GITHUB_TOKEN }}
        text: |
          Application Deployment completed for ${{ github.repository }}
          Branch: ${{ github.ref_name }}
          Commit: ${{ github.sha }}
          Version: ${{ steps.version.outputs.version }}
          Status: ${{ job.status }}
          Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} 