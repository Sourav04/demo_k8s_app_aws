name: Application Deployment

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'app/**'
      - 'helm/**'
      - 'argocd/**'
      - '.github/workflows/app-deployment.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'app/**'
      - 'helm/**'
      - 'argocd/**'

env:
  REGISTRY: docker.io
  IMAGE_NAME: souravdixit04/demo_k8s_app_aws
  APP_VERSION: v1.0.0

permissions:
  contents: read
  security-events: write

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r app/requirements.txt
        pip install pytest pytest-cov flake8
        
    - name: Run linting
      run: |
        flake8 app/src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 app/src/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Run unit tests
      run: |
        cd app
        python -m pytest tests/ -v --cov=src --cov-report=xml
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./app/coverage.xml
        flags: unittests
        name: codecov-umbrella

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    - name: Generate version tag
      id: version
      run: |
        # Generate version based on date and commit
        VERSION="${{ env.APP_VERSION }}-$(date +'%Y%m%d-%H%M%S')-${GITHUB_SHA::8}"
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Generated version: $VERSION"
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha
          type=raw,value=${{ steps.version.outputs.version }}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: Dockerfile
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          APP_VERSION=${{ steps.version.outputs.version }}
          BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          VCS_REF=${{ github.sha }}

  deploy-application:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Generate version tag
      id: version
      run: |
        # Generate version based on date and commit
        VERSION="${{ env.APP_VERSION }}-$(date +'%Y%m%d-%H%M%S')-${GITHUB_SHA::8}"
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Generated version: $VERSION"
        
    - name: Setup kubectl
      run: |
        # Install kubectl
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2
        
    - name: Download cluster info artifacts
      uses: actions/download-artifact@v4
      with:
        name: cluster-info
        path: terraform/
      continue-on-error: true
        
    - name: Get kubeconfig from infrastructure
      run: |
        # Install jq for JSON parsing
        sudo apt-get update
        sudo apt-get install -y jq
        
        # Download cluster info from infrastructure workflow
        # This assumes the infrastructure workflow has already run and uploaded cluster info
        echo "Getting cluster information..."
        
        # Check if we have cluster info from a previous run
        if [ -f "terraform/cluster-info.json" ]; then
          echo "Using existing cluster info from artifacts"
        else
          echo "Cluster info artifacts not found. Trying alternative methods..."
          
          # Try to get cluster info from Terraform state if available
          if [ -f "terraform/terraform.tfstate" ]; then
            echo "Found Terraform state file. Extracting cluster info..."
            cd terraform
            terraform output -json > cluster-info.json
            cd ..
          else
            echo "No Terraform state found. Checking for running infrastructure..."
            
            # Try to find running infrastructure using AWS CLI
            echo "Searching for running k3s demo infrastructure..."
            
            # Look for instances with k3s demo tags
            INSTANCES=$(aws ec2 describe-instances \
              --filters "Name=tag:Project,Values=k3s-demo" "Name=instance-state-name,Values=running" \
              --query 'Reservations[*].Instances[*].[InstanceId,Tags[?Key==`Name`].Value|[0]]' \
              --output text)
            
            if [ -n "$INSTANCES" ]; then
              echo "Found running instances:"
              echo "$INSTANCES"
              
              # Extract master instance ID (assuming first instance is master)
              MASTER_INSTANCE_ID=$(echo "$INSTANCES" | head -1 | cut -f1)
              echo "Using master instance: $MASTER_INSTANCE_ID"
              
              # Look for Load Balancer
              LB_DNS=$(aws elbv2 describe-load-balancers \
                --names k3s-demo-cluster-api-lb \
                --query 'LoadBalancers[0].DNSName' \
                --output text 2>/dev/null || echo "")
              
              if [ -n "$LB_DNS" ] && [ "$LB_DNS" != "None" ]; then
                echo "Found Load Balancer: $LB_DNS"
                
                # Create cluster-info.json manually
                cat > terraform/cluster-info.json << EOF
{
  "kubernetes_api_lb": {
    "value": "$LB_DNS"
  },
  "master_instance_id": {
    "value": "$MASTER_INSTANCE_ID"
  }
}
EOF
                echo "Created cluster-info.json with existing infrastructure"
              else
                echo "ERROR: Load Balancer not found. Please ensure infrastructure is properly deployed."
                exit 1
              fi
            else
              echo "ERROR: No running k3s demo infrastructure found."
              echo "Please run the infrastructure workflow first:"
              echo "1. Go to Actions tab"
              echo "2. Select 'Infrastructure Provisioning' workflow"
              echo "3. Click 'Run workflow'"
              echo "4. Wait for completion"
              echo "5. Then run this workflow again"
              exit 1
            fi
          fi
        fi
        
        # Extract cluster information
        if [ -f "terraform/cluster-info.json" ]; then
          echo "Cluster info found. Extracting information..."
          cat terraform/cluster-info.json | jq -r '.kubernetes_api_lb.value // empty' > kubernetes_api_lb.txt
          cat terraform/cluster-info.json | jq -r '.master_instance_id.value // empty' > master_instance_id.txt
          
          KUBERNETES_API_LB=$(cat kubernetes_api_lb.txt)
          MASTER_INSTANCE_ID=$(cat master_instance_id.txt)
          
          echo "Kubernetes API Load Balancer: $KUBERNETES_API_LB"
          echo "Master Instance ID: $MASTER_INSTANCE_ID"
          
          if [ -z "$KUBERNETES_API_LB" ] || [ -z "$MASTER_INSTANCE_ID" ]; then
            echo "ERROR: Could not extract cluster information from terraform output"
            exit 1
          fi
        else
          echo "ERROR: cluster-info.json not found"
          exit 1
        fi
        
        # Get kubeconfig from master node
        echo "Getting kubeconfig from master node..."
        aws ssm send-command \
          --instance-ids "$MASTER_INSTANCE_ID" \
          --document-name "AWS-RunShellScript" \
          --parameters 'commands=[
            "sudo cat /etc/rancher/k3s/k3s.yaml"
          ]' \
          --query 'Command.CommandId' \
          --output text > kubeconfig_command_id.txt
        
        KUBECONFIG_COMMAND_ID=$(cat kubeconfig_command_id.txt)
        echo "Waiting for kubeconfig command to complete..."
        sleep 10
        
        # Get the kubeconfig content
        aws ssm get-command-invocation \
          --command-id "$KUBECONFIG_COMMAND_ID" \
          --instance-id "$MASTER_INSTANCE_ID" \
          --query 'StandardOutputContent' \
          --output text > kubeconfig_original
        
        # Update the kubeconfig with the Load Balancer URL
        sed "s|server: https://127.0.0.1:6443|server: https://$KUBERNETES_API_LB:6443|g" kubeconfig_original > kubeconfig
        
        # Add insecure-skip-tls-verify to cluster section and remove certificate authority
        sed -i '/cluster:/a\    insecure-skip-tls-verify: true' kubeconfig
        sed -i '/certificate-authority-data:/d' kubeconfig
        
        echo "Kubeconfig updated with Load Balancer URL: https://$KUBERNETES_API_LB:6443"
        
        # Test cluster connectivity
        export KUBECONFIG=./kubeconfig
        echo "Testing cluster connectivity..."
        kubectl get nodes || {
          echo "ERROR: Failed to connect to cluster"
          exit 1
        }
        
        echo "Cluster connectivity successful!"
        
    - name: Deploy ArgoCD Application
      run: |
        echo "Deploying ArgoCD Application with version: ${{ steps.version.outputs.version }}"
        
        # Set KUBECONFIG for this step
        export KUBECONFIG=./kubeconfig
        
        # Check if ArgoCD is running
        echo "Checking ArgoCD status..."
        kubectl get pods -n argocd || {
          echo "ERROR: ArgoCD is not running. Please ensure infrastructure is deployed first."
          exit 1
        }
        
        # Apply the ArgoCD application
        echo "Applying ArgoCD application..."
        kubectl apply -f argocd/application.yaml || {
          echo "ERROR: Failed to apply ArgoCD application"
          exit 1
        }
        
        # Wait for ArgoCD application to be synced
        echo "Waiting for ArgoCD application to sync..."
        kubectl wait --for=condition=available --timeout=300s application/python-app -n argocd || {
          echo "WARNING: ArgoCD application sync timeout. Checking status..."
          kubectl describe application python-app -n argocd
        }
        
        echo "ArgoCD application deployed successfully!"
        
    - name: Update Helm values with new version
      run: |
        echo "Updating Helm values with version: ${{ steps.version.outputs.version }}"
        
        # Update the Helm values file with the new image tag
        # This ensures ArgoCD will use the new version
        sed -i "s|imageTag:.*|imageTag: ${{ steps.version.outputs.version }}|g" helm/python-app/values.yaml
        
        # Commit and push the changes to trigger ArgoCD sync
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add helm/python-app/values.yaml
        git commit -m "Update app version to ${{ steps.version.outputs.version }}" || echo "No changes to commit"
        git push origin main || echo "Push failed or no changes"
        
    - name: Verify deployment
      run: |
        echo "Verifying deployment..."
        
        # Set KUBECONFIG for this step
        export KUBECONFIG=./kubeconfig
        
        # Check if the application is running
        echo "Checking application status..."
        kubectl get pods -l app.kubernetes.io/name=python-app || {
          echo "WARNING: Application pods not found"
        }
        
        # Check ArgoCD application status
        echo "Checking ArgoCD application status..."
        kubectl get application python-app -n argocd -o yaml | grep -A 5 "status:" || {
          echo "WARNING: ArgoCD application status not available"
        }
        
        echo "Application version ${{ steps.version.outputs.version }} has been deployed"
        echo "ArgoCD will automatically sync the new version"

  notify:
    name: Notify Application Deployment
    runs-on: ubuntu-latest
    needs: [deploy-application]
    if: always()
    
    steps:
    - name: Generate version tag
      id: version
      run: |
        # Generate version based on date and commit
        VERSION="${{ env.APP_VERSION }}-$(date +'%Y%m%d-%H%M%S')-${GITHUB_SHA::8}"
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
    - name: Slack Notification
      uses: 8398a7/action-slack@v3
      with:
        status: success
        channel: '#deployments'
        author_name: Application Pipeline
        github_token: ${{ secrets.GITHUB_TOKEN }}
        text: |
          Application Deployment completed for ${{ github.repository }}
          Branch: ${{ github.ref_name }}
          Commit: ${{ github.sha }}
          Version: ${{ steps.version.outputs.version }}
          Status: ${{ job.status }}
          Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} 