# Default values for python-app
# This file contains all configurations for different environments
# Use --set environment=<env> to switch between environments

# Environment configuration (dev, staging, prod, test)
environment: "dev"

# Application configuration
replicaCount: 2

image:
  repository: souravdixit04/demo_k8s_app_aws
  tag: main
  pullPolicy: Always

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: false
  annotations: {}
  name: ""

podAnnotations: {}

podSecurityContext: {}

securityContext: {}

service:
  type: LoadBalancer
  port: 8080
  targetPort: 5000

ingress:
  enabled: false
  className: ""
  annotations: {}
  hosts:
    - host: python-app.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []

# Resource configurations for different environments
resources:
  # Default resources (can be overridden per environment)
  limits:
    cpu: 500m
    memory: 512Mi
  requests:
    cpu: 250m
    memory: 256Mi
  
  # Environment-specific resource overrides
  environments:
    dev:
      limits:
        cpu: 300m
        memory: 256Mi
      requests:
        cpu: 100m
        memory: 128Mi
    staging:
      limits:
        cpu: 500m
        memory: 512Mi
      requests:
        cpu: 250m
        memory: 256Mi
    prod:
      limits:
        cpu: 1000m
        memory: 1Gi
      requests:
        cpu: 500m
        memory: 512Mi
    test:
      limits:
        cpu: 200m
        memory: 256Mi
      requests:
        cpu: 100m
        memory: 128Mi

# Autoscaling configuration
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  
  # Environment-specific autoscaling
  environments:
    dev:
      enabled: false
      minReplicas: 1
      maxReplicas: 3
      targetCPUUtilizationPercentage: 80
    staging:
      enabled: true
      minReplicas: 1
      maxReplicas: 5
      targetCPUUtilizationPercentage: 75
    prod:
      enabled: true
      minReplicas: 2
      maxReplicas: 10
      targetCPUUtilizationPercentage: 70
    test:
      enabled: false
      minReplicas: 1
      maxReplicas: 2
      targetCPUUtilizationPercentage: 80

nodeSelector: {}
tolerations: []
affinity: {}

# Redis configuration
redis:
  enabled: true
  image:
    repository: redis
    tag: "7-alpine"
  
  # Default Redis resources
  resources:
    limits:
      cpu: 200m
      memory: 256Mi
    requests:
      cpu: 100m
      memory: 128Mi
  
  # Environment-specific Redis configurations
  environments:
    dev:
      enabled: true
      resources:
        limits:
          cpu: 100m
          memory: 128Mi
        requests:
          cpu: 50m
          memory: 64Mi
    staging:
      enabled: true
      resources:
        limits:
          cpu: 200m
          memory: 256Mi
        requests:
          cpu: 100m
          memory: 128Mi
    prod:
      enabled: true
      resources:
        limits:
          cpu: 500m
          memory: 512Mi
        requests:
          cpu: 200m
          memory: 256Mi
    test:
      enabled: false  # Use mock Redis for testing

# Environment variables
env:
  REDIS_PORT: "6379"
  REDIS_DB: "0"
  FLASK_ENV: "production"
  PORT: "5000"
  
  # Environment-specific variables
  environments:
    dev:
      FLASK_ENV: "development"
      LOG_LEVEL: "debug"
    staging:
      FLASK_ENV: "staging"
      LOG_LEVEL: "info"
    prod:
      FLASK_ENV: "production"
      LOG_LEVEL: "warning"
    test:
      FLASK_ENV: "testing"
      LOG_LEVEL: "debug"
      MOCK_REDIS: "true"

# Health check probes
probes:
  livenessProbe:
    httpGet:
      path: /health
      port: 5000
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
  readinessProbe:
    httpGet:
      path: /health
      port: 5000
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 3
  
  # Environment-specific probe configurations
  environments:
    dev:
      livenessProbe:
        initialDelaySeconds: 10
        periodSeconds: 30
      readinessProbe:
        initialDelaySeconds: 5
        periodSeconds: 10
    staging:
      livenessProbe:
        initialDelaySeconds: 20
        periodSeconds: 15
      readinessProbe:
        initialDelaySeconds: 5
        periodSeconds: 5
    prod:
      livenessProbe:
        initialDelaySeconds: 30
        periodSeconds: 10
      readinessProbe:
        initialDelaySeconds: 5
        periodSeconds: 5
    test:
      livenessProbe:
        initialDelaySeconds: 10
        periodSeconds: 30
      readinessProbe:
        initialDelaySeconds: 5
        periodSeconds: 10

# Monitoring configuration
monitoring:
  enabled: true
  serviceMonitor:
    enabled: true
    interval: 30s
  prometheusRule:
    enabled: true
  
  # Environment-specific monitoring
  environments:
    dev:
      enabled: false
      serviceMonitor:
        enabled: false
      prometheusRule:
        enabled: false
    staging:
      enabled: true
      serviceMonitor:
        enabled: true
        interval: 60s
      prometheusRule:
        enabled: false
    prod:
      enabled: true
      serviceMonitor:
        enabled: true
        interval: 30s
      prometheusRule:
        enabled: true
    test:
      enabled: false
      serviceMonitor:
        enabled: false
      prometheusRule:
        enabled: false

# Labels and metadata
labels:
  app: python-app
  version: v1

# Replica count per environment
replicaCounts:
  dev: 1
  staging: 2
  prod: 3
  test: 1 